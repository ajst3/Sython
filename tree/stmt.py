# This file was generated by the expresion_generator tool.
# Holds all of the expression classes.

class Stmt():
	def accept(self, visitor):
		pass

class If(Stmt):
	def __init__(self, condition, then_branch, else_branch):
		self.condition = condition
		self.then_branch = then_branch
		self.else_branch = else_branch

	def accept(self, visitor):
		return visitor.visitIf(self)

class Block(Stmt):
	def __init__(self, statements):
		self.statements = statements

	def accept(self, visitor):
		return visitor.visitBlock(self)

class Expression(Stmt):
	def __init__(self, expression):
		self.expression = expression

	def accept(self, visitor):
		return visitor.visitExpression(self)

class Print(Stmt):
	def __init__(self, expression):
		self.expression = expression

	def accept(self, visitor):
		return visitor.visitPrint(self)

class Var(Stmt):
	def __init__(self, name, type, initializer):
		self.name = name
		self.type = type
		self.initializer = initializer

	def accept(self, visitor):
		return visitor.visitVar(self)

class While(Stmt):
	def __init__(self, condition, body):
		self.condition = condition
		self.body = body

	def accept(self, visitor):
		return visitor.visitWhile(self)

class For(Stmt):
	def __init__(self, initializer, condition, body, increment, else_branch):
		self.initializer = initializer
		self.condition = condition
		self.body = body
		self.increment = increment
		self.else_branch = else_branch

	def accept(self, visitor):
		return visitor.visitFor(self)

class Do(Stmt):
	def __init__(self, condition, body, condition_type):
		self.condition = condition
		self.body = body
		self.condition_type = condition_type

	def accept(self, visitor):
		return visitor.visitDo(self)

class Until(Stmt):
	def __init__(self, condition, body):
		self.condition = condition
		self.body = body

	def accept(self, visitor):
		return visitor.visitUntil(self)

